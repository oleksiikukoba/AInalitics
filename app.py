# app.py
import streamlit as st
import pandas as pd
from datetime import datetime, date, timedelta
from googleapiclient.discovery import build
import openai
import time
import re

# app.py
# ... (—ñ–º–ø–æ—Ä—Ç–∏ streamlit, pandas, datetime, etc.) ...
import os # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Å—è, —â–æ —Ü–µ–π —ñ–º–ø–æ—Ä—Ç —î –∞–±–æ –¥–æ–¥–∞–π –π–æ–≥–æ

# --- –û—Ç—Ä–∏–º–∞–Ω–Ω—è API –∫–ª—é—á—ñ–≤ ---
# –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∑ —Å–µ–∫—Ä–µ—Ç—ñ–≤ Streamlit Cloud (—è–∫—â–æ –¥–æ–¥–∞—Ç–æ–∫ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ)
# –¶—ñ —ñ–º–µ–Ω–∞ –∑–º—ñ–Ω–Ω–∏—Ö YOUTUBE_API_KEY —Ç–∞ OPENAI_API_KEY –º–∞—é—Ç—å –∑–±—ñ–≥–∞—Ç–∏—Å—è –∑ —Ç–∏–º–∏, 
# —è–∫—ñ —Ç–∏ –≤–∫–∞–∂–µ—à —É –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è—Ö —Å–µ–∫—Ä–µ—Ç—ñ–≤ –Ω–∞ Streamlit Cloud.
YOUTUBE_API_KEY = st.secrets.get("YOUTUBE_API_KEY")
OPENAI_API_KEY = st.secrets.get("OPENAI_API_KEY")

# –Ø–∫—â–æ –∫–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö Streamlit Cloud (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ø—Ä–∏ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∑–∞–ø—É—Å–∫—É),
# –Ω–∞–º–∞–≥–∞—î–º–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ó—Ö –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª—É config_keys.py
if not YOUTUBE_API_KEY or not OPENAI_API_KEY:
    # st.sidebar.caption("–ö–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ Streamlit Secrets, –∑–∞–≤–∞–Ω—Ç–∞–∂—É—é –∑ config_keys.py") # –î–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
    try:
        from config_keys import YOUTUBE_API_KEY as YOUTUBE_API_KEY_local
        from config_keys import OPENAI_API_KEY as OPENAI_API_KEY_local
        YOUTUBE_API_KEY = YOUTUBE_API_KEY_local
        OPENAI_API_KEY = OPENAI_API_KEY_local
    except ImportError:
        # –¶–µ–π st.error –±—É–¥–µ –≤–∏–¥–Ω–æ —ñ –ª–æ–∫–∞–ª—å–Ω–æ, —ñ –≤ —Ö–º–∞—Ä—ñ, —è–∫—â–æ –Ω—ñ–¥–µ –Ω–µ–º–∞—î –∫–ª—é—á—ñ–≤
        st.error("–ü–æ–º–∏–ª–∫–∞: –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ API –∫–ª—é—á—ñ. "
                 "–ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤–æ–Ω–∏ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ —è–∫ —Å–µ–∫—Ä–µ—Ç–∏ –≤ Streamlit Cloud (—è–∫—â–æ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–æ), "
                 "–∞–±–æ —ñ—Å–Ω—É—î –ª–æ–∫–∞–ª—å–Ω–∏–π —Ñ–∞–π–ª config_keys.py –∑ –∫–æ—Ä–µ–∫—Ç–Ω–∏–º–∏ –∫–ª—é—á–∞–º–∏.")
        st.stop() # –ó—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è, —è–∫—â–æ –∫–ª—é—á—ñ –Ω–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ

# –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –∫–ª—é—á—ñ –¥—ñ–π—Å–Ω–æ —î
if not YOUTUBE_API_KEY or not OPENAI_API_KEY:
    st.error("–ü–æ–º–∏–ª–∫–∞: YOUTUBE_API_KEY –∞–±–æ OPENAI_API_KEY –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ.")
    st.stop()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è OpenAI API –∫–ª—é—á–∞ (YOUTUBE_API_KEY –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –Ω–∞–ø—Ä—è–º—É –≤ —Ñ—É–Ω–∫—Ü—ñ—ó)
openai.api_key = OPENAI_API_KEY

# ID YouTube-–∫–∞–Ω–∞–ª—É "–ê—Ä–º—ñ—è TV"
CHANNEL_ID = "UCWRZ7gEgbry5FI2-46EX3jA"

# –í–∏–∑–Ω–∞—á–µ–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
CATEGORIES = [
    "–¢–∞–Ω–∫–∏",  # –ü—Ä–æ —Ç–∞–Ω–∫–∏, —ó—Ö –±–æ–π–æ–≤–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è
    "–ê—Ä—Ç–∏–ª–µ—Ä—ñ—è",  # –ü—Ä–æ –∞—Ä—Ç–∏–ª–µ—Ä—ñ–π—Å—å–∫—ñ —Å–∏—Å—Ç–µ–º–∏, –†–°–ó–í, –º—ñ–Ω–æ–º–µ—Ç–∏
    "–ê–≤—ñ–∞—Ü—ñ—è",  # –ü—Ä–æ –ª—ñ—Ç–∞–∫–∏, –≥–µ–ª—ñ–∫–æ–ø—Ç–µ—Ä–∏, –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ –±–æ—ó, –ü–ü–û –ø–æ –∞–≤—ñ–∞—Ü—ñ—ó
    "–ë—Ä–æ–Ω–µ—Ç–µ—Ö–Ω—ñ–∫–∞",  # –ü—Ä–æ –ë–ú–ü, –ë–¢–†, —ñ–Ω—à—É –ª–µ–≥–∫—É/—Å–µ—Ä–µ–¥–Ω—é –±—Ä–æ–Ω–µ—Ç–µ—Ö–Ω—ñ–∫—É (–∫—Ä—ñ–º —Ç–∞–Ω–∫—ñ–≤)
    "–î—Ä–æ–Ω–∏",  # –ü—Ä–æ —Ä–æ–∑–≤—ñ–¥—É–≤–∞–ª—å–Ω—ñ —Ç–∞ —É–¥–∞—Ä–Ω—ñ –ë–ü–õ–ê, FPV-–¥—Ä–æ–Ω–∏, –†–ï–ë –ø—Ä–æ—Ç–∏ –¥—Ä–æ–Ω—ñ–≤
    "–ü—ñ—Ö–æ—Ç–∞ —ñ –≥–∞—Ä—è—á—ñ –Ω–∞–ø—Ä—è–º–∫–∏",  # –ü—Ä–æ –¥—ñ—ó –ø—ñ—Ö–æ—Ç–∏, —à—Ç—É—Ä–º–∏, –±–æ—ó –≤ –º—ñ—Å—Ç–∞—Ö, —Ä–µ–ø–æ—Ä—Ç–∞–∂—ñ –∑ —Ñ—Ä–æ–Ω—Ç—É
    "–ì–µ—Ä–æ—ó–∑–º —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö, –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ñ —Ä–µ–ø–æ—Ä—Ç–∞–∂—ñ", # –Ü–Ω—Ç–µ—Ä–≤'—é, —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–¥–≤–∏–≥—ñ–≤
    "–ù–∞–≤—á–∞–Ω–Ω—è",  # –ù–∞–≤—á–∞–ª—å–Ω—ñ –≤—ñ–¥–µ–æ, —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó, —Ç–∞–∫—Ç–∏—á–Ω–∞ –º–µ–¥–∏—Ü–∏–Ω–∞, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è
    "–û–≥–ª—è–¥–∏ –∑—Ä–∞–∑–∫—ñ–≤ –æ–∑–±—Ä–æ—î–Ω–Ω—è",  # –û–≥–ª—è–¥–∏ —Å—Ç—Ä—ñ–ª–µ—Ü—å–∫–æ—ó –∑–±—Ä–æ—ó, –≥—Ä–∞–Ω–∞—Ç–æ–º–µ—Ç—ñ–≤, –ü–¢–†–ö
    "–ù–æ–≤–∏–Ω–∏, –°—Ç—Ä—ñ–º–∏, –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞", # –ó–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω, —Å—Ç—Ä—ñ–º–∏ –∑ —Ñ—Ä–æ–Ω—Ç—É, –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –æ–≥–ª—è–¥–∏ (–ù–û–í–ê)
    "–†—ñ–∑–Ω–µ" # –î–ª—è –≤—Å—å–æ–≥–æ —ñ–Ω—à–æ–≥–æ, —â–æ –Ω–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å
]
st.set_page_config(layout="wide") # –†–æ–±–∏–º–æ —Å—Ç–æ—Ä—ñ–Ω–∫—É —à–∏—Ä—à–æ—é
st.title("ü§ñ –®–Ü-–ê–≥–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É YouTube-–∫–∞–Ω–∞–ª—É '–ê—Ä–º—ñ—è TV'")


# --- –¢—É—Ç –±—É–¥—É—Ç—å —Ñ—É–Ω–∫—Ü—ñ—ó ---

def parse_iso8601_duration(duration_str):
    """
    –ü–∞—Ä—Å–∏—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO 8601 (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "PT1M30S")
    —ñ –ø–æ–≤–µ—Ä—Ç–∞—î –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Å–µ–∫—É–Ω–¥.
    –í—ñ–¥–µ–æ –±–µ–∑ —Ç—Ä–∏–≤–∞–ª–æ—Å—Ç—ñ –∞–±–æ –∑ —Ñ–æ—Ä–º–∞—Ç–æ–º "P0D" (—á–∞—Å—Ç–æ –¥–ª—è –ø—Ä—è–º–∏—Ö —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ–π, —â–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—è)
    –±—É–¥—É—Ç—å –º–∞—Ç–∏ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å 0.
    """
    if not duration_str or not duration_str.startswith('PT') or duration_str == 'P0D':
        # P0D —ñ–Ω–æ–¥—ñ –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è –¥–ª—è –≤—ñ–¥–µ–æ, —è–∫—ñ –±—É–ª–∏ –ø—Ä—è–º–∏–º–∏ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—è–º–∏
        return 0

    hours = 0
    minutes = 0
    seconds = 0

    # –í–∏–¥–∞–ª—è—î–º–æ 'PT' –∑ –ø–æ—á–∞—Ç–∫—É
    duration_str = duration_str[2:]

    # –ì–æ–¥–∏–Ω–∏
    if 'H' in duration_str:
        parts = duration_str.split('H')
        hours = int(parts[0])
        duration_str = parts[1] if len(parts) > 1 else ''

    # –•–≤–∏–ª–∏–Ω–∏
    if 'M' in duration_str:
        parts = duration_str.split('M')
        minutes = int(parts[0])
        duration_str = parts[1] if len(parts) > 1 else ''

    # –°–µ–∫—É–Ω–¥–∏
    if 'S' in duration_str:
        parts = duration_str.split('S')
        seconds = int(parts[0])

    total_seconds = hours * 3600 + minutes * 60 + seconds
    return total_seconds

# ... (—ñ–Ω—à—ñ —Ç–≤–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó: @st.cache_data(ttl=3600) def get_channel_videos(...) —ñ —Ç.–¥.) ...
@st.cache_data(ttl=3600)  # –ö–µ—à—É—î–º–æ –¥–∞–Ω—ñ –Ω–∞ 1 –≥–æ–¥–∏–Ω—É, —â–æ–± –Ω–µ –∑–∞–ø–∏—Ç—É–≤–∞—Ç–∏ YouTube API –∑–∞–Ω–∞–¥—Ç–æ —á–∞—Å—Ç–æ
def get_channel_videos(api_key, channel_id, start_date, end_date):
    """–û—Ç—Ä–∏–º—É—î —Å–ø–∏—Å–æ–∫ –≤—ñ–¥–µ–æ –∑ –∫–∞–Ω–∞–ª—É –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥."""
    youtube = build('youtube', 'v3', developerKey=api_key)
    videos_data = []
    next_page_token = None

    # –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –¥–∞—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç ISO 8601 –¥–ª—è YouTube API
    published_after = start_date.isoformat() + "T00:00:00Z"
    # –î–æ–¥–∞—î–º–æ –æ–¥–∏–Ω –¥–µ–Ω—å –¥–æ –∫—ñ–Ω—Ü–µ–≤–æ—ó –¥–∞—Ç–∏, —â–æ–± –≤–∫–ª—é—á–∏—Ç–∏ –≤–µ—Å—å –¥–µ–Ω—å
    published_before = (end_date + timedelta(days=1)).isoformat() + "T00:00:00Z"

    try:
        while True:
            request = youtube.search().list(
                part='snippet',
                channelId=channel_id,
                maxResults=50,  # –ú–∞–∫—Å–∏–º—É–º –∑–∞ –æ–¥–∏–Ω –∑–∞–ø–∏—Ç
                pageToken=next_page_token,
                type='video',
                order='date',
                publishedAfter=published_after,
                publishedBefore=published_before
            )
            response = request.execute()

            video_ids = []
            for item in response.get('items', []):
                if item.get('id', {}).get('kind') == 'youtube#video':
                    video_ids.append(item['id']['videoId'])

            if not video_ids:
                break

            video_details_request = youtube.videos().list(
                part="snippet,statistics,contentDetails",
                id=",".join(video_ids)
            )
            video_details_response = video_details_request.execute()

            # ... (–∫–æ–¥ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º for item in video_details_response.get('items', []):)
            for item in video_details_response.get('items', []):
                # --- –ú–û–î–ò–§–Ü–ö–û–í–ê–ù–û: –û—Ç—Ä–∏–º–∞–Ω–Ω—è, –ø–∞—Ä—Å–∏–Ω–≥ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –∑–∞ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é ---
                duration_iso = item.get('contentDetails', {}).get('duration')

                if not duration_iso:
                    # st.caption(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –≤—ñ–¥–µ–æ –±–µ–∑ –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {item['snippet']['title']}") # –î–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥–µ–æ, —è–∫—â–æ –∑ —è–∫–æ—ó—Å—å –ø—Ä–∏—á–∏–Ω–∏ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å

                video_duration_seconds = parse_iso8601_duration(duration_iso)

                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å –¥–ª—è "–Ω–µ-Shorts" –≤—ñ–¥–µ–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.
                # Shorts –æ—Ñ—ñ—Ü—ñ–π–Ω–æ –¥–æ 120 —Å–µ–∫—É–Ω–¥.
                # –ó–Ω–∞—á–µ–Ω–Ω—è 121 –æ–∑–Ω–∞—á–∞—î, —â–æ –≤—ñ–¥–µ–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é 120 —Å–µ–∫—É–Ω–¥ –±—É–¥–µ –≤—ñ–¥—Ñ—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω–µ.
                MIN_DURATION_FOR_REGULAR_VIDEO_SECONDS = 121

                if video_duration_seconds < MIN_DURATION_FOR_REGULAR_VIDEO_SECONDS:
                    # st.caption(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ Shorts/–∫–æ—Ä–æ—Ç–∫–µ –≤—ñ–¥–µ–æ: {item['snippet']['title']} ({video_duration_seconds}s)") # –î–ª—è –≤—ñ–¥–ª–∞–¥–∫–∏
                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ —Ü–µ –≤—ñ–¥–µ–æ (–π–º–æ–≤—ñ—Ä–Ω–æ, Shorts –∞–±–æ –¥—É–∂–µ –∫–æ—Ä–æ—Ç–∫–µ)
                # --- –ö–Ü–ù–ï–¶–¨ –ú–û–î–ò–§–Ü–ö–û–í–ê–ù–û–ì–û –ë–õ–û–ö–£ ---

                video_title = item['snippet']['title']
                video_description = item['snippet']['description']
                view_count = int(item.get('statistics', {}).get('viewCount', 0))
                published_at_str = item['snippet']['publishedAt']
                published_date = datetime.strptime(published_at_str, "%Y-%m-%dT%H:%M:%SZ").date()

                videos_data.append({
                    'id': item['id'],  # –¶–µ –≤–∂–µ videoId
                    'title': video_title,
                    'description': video_description,
                    'views': view_count,
                    'published_at': published_date,
                    'duration_seconds': video_duration_seconds,  # –û–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: –¥–æ–¥–∞—î–º–æ —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —É —Å–µ–∫—É–Ω–¥–∞—Ö
                    'category': "–ù–µ –≤–∏–∑–Ω–∞—á–µ–Ω–æ"
                })
            # ... (–∫–æ–¥ –ø—ñ—Å–ª—è —Ü–∏–∫–ª—É)

            next_page_token = response.get('nextPageToken')
            if not next_page_token:
                break

# –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame –∑ –∑—ñ–±—Ä–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö
        final_df = pd.DataFrame(videos_data)
        
        # --- –î–û–î–ê–ù–û: –í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤ –≤—ñ–¥–µ–æ –∑–∞ —ó—Ö 'id' ---
        if not final_df.empty and 'id' in final_df.columns:
            # keep='first' –æ–∑–Ω–∞—á–∞—î, —â–æ —è–∫—â–æ —î –¥—É–±–ª—ñ–∫–∞—Ç–∏, –∑–∞–ª–∏—à–∏—Ç—å—Å—è –ø–µ—Ä—à–∏–π –∑—É—Å—Ç—Ä—ñ–Ω—É—Ç–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä
            final_df.drop_duplicates(subset=['id'], keep='first', inplace=True)
        # --- –ö–Ü–ù–ï–¶–¨ –î–û–î–ê–ù–û–ì–û –ë–õ–û–ö–£ ---
            
        return final_df
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ YouTube: {e}")
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π DataFrame —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏, —â–æ–± –¥–æ–¥–∞—Ç–æ–∫ –Ω–µ "–≤–ø–∞–≤"
        return pd.DataFrame(columns=['id', 'title', 'description', 'views', 'published_at', 'category'])


@st.cache_data(ttl=86400)  # –ö–µ—à—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ –¥–æ–±—É
def categorize_video_gpt(title, description, categories_list):
    """
    –ö–∞—Ç–µ–≥–æ—Ä–∏–∑—É—î –≤—ñ–¥–µ–æ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPT –∑ –¥–µ—Ç–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–º–∏ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏ —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∞–º–∏.
    """
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ —É–Ω—ñ—Ñ—ñ–∫–æ–≤–∞–Ω—É –Ω–∞–∑–≤—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "–†—ñ–∑–Ω–µ"
    # –í–æ–Ω–∞ –º–∞—î –±—É—Ç–∏ –ø—Ä–∏—Å—É—Ç–Ω—è —É categories_list
    default_other_category = "–†—ñ–∑–Ω–µ" 
    if default_other_category not in categories_list:
        if categories_list: # –Ø–∫—â–æ —Å–ø–∏—Å–æ–∫ –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ–π, –±–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ—é —è–∫ "–†—ñ–∑–Ω–µ"
            default_other_category = categories_list[-1] 
        else: # –î—É–∂–µ –º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–∏–π –≤–∏–ø–∞–¥–æ–∫, –∫–æ–ª–∏ —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π
            return "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –Ω–µ –≤–∏–∑–Ω–∞—á–µ–Ω–∞ (—Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π –ø–æ—Ä–æ–∂–Ω—ñ–π)"

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å OpenAI API –∫–ª—é—á–∞
    # –ü—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ OPENAI_API_KEY - —Ü–µ –≥–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –∞–±–æ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ü—å–æ–º—É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ
    # –Ø–∫—â–æ OPENAI_API_KEY –ø–µ—Ä–µ–¥–∞—î—Ç—å—Å—è —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç, –∑–º—ñ–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ
    if 'OPENAI_API_KEY' not in globals() or not OPENAI_API_KEY:
         st.error("–ö–ª—é—á OpenAI API –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó categorize_video_gpt.")
         return default_other_category

    description_snippet = description[:1500] if description else "" # –õ—ñ–º—ñ—Ç –æ–ø–∏—Å—É

    # –°–ª–æ–≤–Ω–∏–∫ –∑ –æ–ø–∏—Å–∞–º–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π (–ê–î–ê–ü–¢–£–ô –ü–Ü–î –°–í–Ü–ô –§–Ü–ù–ê–õ–¨–ù–ò–ô –°–ü–ò–°–û–ö CATEGORIES)
    # –¶–µ –º–∞—î —Ç–æ—á–Ω–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —Ç–≤–æ—ó–º –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º —É —Å–ø–∏—Å–∫—É CATEGORIES
    category_instructions = {
        "–¢–∞–Ω–∫–∏": "–í—ñ–¥–µ–æ –ø—Ä–æ —Ç–∞–Ω–∫–∏ (–Ω–∞–ø—Ä., –¢-64, Leopard, Abrams), —ó—Ö –º–æ–¥–∏—Ñ—ñ–∫–∞—Ü—ñ—ó, –±–æ–π–æ–≤–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è, –æ–≥–ª—è–¥–∏, –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è, —Ç–∞–Ω–∫–æ–≤—ñ –±–æ—ó, –∑–Ω–∏—â–µ–Ω–Ω—è –≤–æ—Ä–æ–∂–∏—Ö —Ç–∞–Ω–∫—ñ–≤.",
        "–ê—Ä—Ç–∏–ª–µ—Ä—ñ—è": "–í—ñ–¥–µ–æ –ø—Ä–æ –∞—Ä—Ç–∏–ª–µ—Ä—ñ–π—Å—å–∫—ñ —Å–∏—Å—Ç–µ–º–∏ (–≥–∞—É–±–∏—Ü—ñ, –°–ê–£ —è–∫ PzH 2000, Caesar, –†–°–ó–í —è–∫ HIMARS, Grad, –º—ñ–Ω–æ–º–µ—Ç–∏), —ó—Ö–Ω—é —Ä–æ–±–æ—Ç—É, –±–æ—î–ø—Ä–∏–ø–∞—Å–∏, —Ç–∞–∫—Ç–∏–∫—É –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è.",
        "–ê–≤—ñ–∞—Ü—ñ—è": "–í—ñ–¥–µ–æ –ø—Ä–æ –≤—ñ–π—Å—å–∫–æ–≤—ñ –ª—ñ—Ç–∞–∫–∏ (–Ω–∞–ø—Ä., –°—É-25, –ú—ñ–ì-29, F-16), –≥–µ–ª—ñ–∫–æ–ø—Ç–µ—Ä–∏ (–ú—ñ-8, –ú—ñ-24, Apache), –ø–æ–≤—ñ—Ç—Ä—è–Ω—ñ –±–æ—ó, —Ä–æ–±–æ—Ç—É –ü–ü–û –ø–æ –∞–≤—ñ–∞—Ü—ñ—ó –≤–æ—Ä–æ–≥–∞.",
        "–ë—Ä–æ–Ω–µ—Ç–µ—Ö–Ω—ñ–∫–∞": "–í—ñ–¥–µ–æ –ø—Ä–æ –±—Ä–æ–Ω—å–æ–≤–∞–Ω—ñ –º–∞—à–∏–Ω–∏ –ø—ñ—Ö–æ—Ç–∏ (–ë–ú–ü), –±—Ä–æ–Ω–µ—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∏ (–ë–¢–† —è–∫ M113, Stryker), –±–æ–π–æ–≤—ñ —Ä–æ–∑–≤—ñ–¥—É–≤–∞–ª—å–Ω—ñ –º–∞—à–∏–Ω–∏, MRAP —Ç–∞ —ñ–Ω—à—É –ª–µ–≥–∫—É —ñ —Å–µ—Ä–µ–¥–Ω—é –±—Ä–æ–Ω–µ—Ç–µ—Ö–Ω—ñ–∫—É (–æ–∫—Ä—ñ–º —Ç–∞–Ω–∫—ñ–≤).",
        "–î—Ä–æ–Ω–∏": "–í—ñ–¥–µ–æ –ø—Ä–æ —Ä–æ–∑–≤—ñ–¥—É–≤–∞–ª—å–Ω—ñ —Ç–∞ —É–¥–∞—Ä–Ω—ñ –±–µ–∑–ø—ñ–ª–æ—Ç–Ω–∏–∫–∏ (–ë–ü–õ–ê), FPV-–¥—Ä–æ–Ω–∏, —ó—Ö —Ä–æ–∑—Ä–æ–±–∫—É, –≤–∏—Ä–æ–±–Ω–∏—Ü—Ç–≤–æ, –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä–æ–∑–≤—ñ–¥–∫–∏ —Ç–∞ —É—Ä–∞–∂–µ–Ω–Ω—è —Ü—ñ–ª–µ–π, –±–æ—Ä–æ—Ç—å–±—É –∑ –≤–æ—Ä–æ–∂–∏–º–∏ –¥—Ä–æ–Ω–∞–º–∏ (–†–ï–ë). –í–∫–ª—é—á–Ω–æ –∑ –∞–Ω–∞–ª—ñ–∑–æ–º –µ–≤–æ–ª—é—Ü—ñ—ó –ë–ü–õ–ê.",
        "–ü—ñ—Ö–æ—Ç–∞ —ñ –≥–∞—Ä—è—á—ñ –Ω–∞–ø—Ä—è–º–∫–∏": "–í—ñ–¥–µ–æ –ø—Ä–æ –¥—ñ—ó –ø—ñ—Ö–æ—Ç–Ω–∏—Ö –ø—ñ–¥—Ä–æ–∑–¥—ñ–ª—ñ–≤, —à—Ç—É—Ä–º–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó, –±–æ—ó –≤ –º—ñ—Å—Ç–∞—Ö —Ç–∞ –Ω–∞ –≤—ñ–¥–∫—Ä–∏—Ç—ñ–π –º—ñ—Å—Ü–µ–≤–æ—Å—Ç—ñ, —Ä–µ–ø–æ—Ä—Ç–∞–∂—ñ –∑ –ø–µ—Ä–µ–¥–æ–≤–æ—ó, —Ç–∞–∫—Ç–∏–∫—É –ø—ñ—Ö–æ—Ç–∏, –∞–Ω–∞–ª—ñ–∑ –±–æ–π–æ–≤–∏—Ö –¥—ñ–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –≥–∞—Ä—è—á–∏—Ö –Ω–∞–ø—Ä—è–º–∫–∞—Ö (–Ω–∞–ø—Ä., –ë–∞—Ö–º—É—Ç, –ê–≤–¥—ñ—ó–≤–∫–∞). –í–∫–ª—é—á–Ω–æ –∑ –≤—ñ–¥–µ–æ –ø—Ä–æ —Ä–æ–±–æ—Ç—É —Å–Ω–∞–π–ø–µ—Ä—ñ–≤ —É —Å–∫–ª–∞–¥—ñ –ø—ñ—Ö–æ—Ç–Ω–∏—Ö –≥—Ä—É–ø.",
        "–ì–µ—Ä–æ—ó–∑–º —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö, –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ñ —Ä–µ–ø–æ—Ä—Ç–∞–∂—ñ": "–Ü–Ω—Ç–µ—Ä–≤'—é –∑ –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—è–º–∏ –ó–°–£, —Ä–æ–∑–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ —ó—Ö–Ω—ñ–π –æ—Å–æ–±–∏—Å—Ç–∏–π –±–æ–π–æ–≤–∏–π —à–ª—è—Ö, –ø—Ä–æ—è–≤–ª–µ–Ω–∏–π –≥–µ—Ä–æ—ó–∑–º, —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –ø–æ–¥–≤–∏–≥–∏, –¥–æ—Å–≤—ñ–¥ –ø–µ—Ä–µ–±—É–≤–∞–Ω–Ω—è –≤ –ø–æ–ª–æ–Ω—ñ, —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—é –ø—ñ—Å–ª—è –ø–æ—Ä–∞–Ω–µ–Ω—å, –º–æ—Ç–∏–≤–∞—Ü—ñ–π–Ω—ñ —Å—é–∂–µ—Ç–∏ –ø—Ä–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –±—ñ–π—Ü—ñ–≤, —ó—Ö–Ω—ñ –¥—É–º–∫–∏ —Ç–∞ –ø–æ—á—É—Ç—Ç—è. –í–∫–ª—é—á–Ω–æ –∑ —ñ—Å—Ç–æ—Ä—ñ—è–º–∏ –ø—Ä–æ –≤–æ–ª–æ–Ω—Ç–µ—Ä—ñ–≤, –º–µ–¥–∏–∫—ñ–≤ –Ω–∞ —Ñ—Ä–æ–Ω—Ç—ñ.",
        "–ù–∞–≤—á–∞–Ω–Ω—è": "–ù–∞–≤—á–∞–ª—å–Ω—ñ –≤—ñ–¥–µ–æ, —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó –∑ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –∑–±—Ä–æ—ó —Ç–∞ —Ç–µ—Ö–Ω—ñ–∫–∏, —Ç–∞–∫—Ç–∏—á–Ω–æ—ó –º–µ–¥–∏—Ü–∏–Ω–∏ (–Ω–∞–ø—Ä., –Ω–∞–∫–ª–∞–¥–∞–Ω–Ω—è —Ç—É—Ä–Ω—ñ–∫–µ—Ç—É), –≤—ñ–π—Å—å–∫–æ–≤–æ—ó –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏, —Ä–æ–∑–±—ñ—Ä —Ç–∞–∫—Ç–∏—á–Ω–∏—Ö –ø—Ä–∏–π–æ–º—ñ–≤, —Ç—Ä–µ–Ω—É–≤–∞–Ω–Ω—è –±—ñ–π—Ü—ñ–≤, –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –≤–∏–∂–∏–≤–∞–Ω–Ω—è.",
        "–û–≥–ª—è–¥–∏ –∑—Ä–∞–∑–∫—ñ–≤ –æ–∑–±—Ä–æ—î–Ω–Ω—è": "–î–µ—Ç–∞–ª—å–Ω—ñ –æ–≥–ª—è–¥–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏—Ö –º–æ–¥–µ–ª–µ–π —Å—Ç—Ä—ñ–ª–µ—Ü—å–∫–æ—ó –∑–±—Ä–æ—ó (–∞–≤—Ç–æ–º–∞—Ç–∏, –∫—É–ª–µ–º–µ—Ç–∏, –≥–≤–∏–Ω—Ç—ñ–≤–∫–∏), –≥—Ä–∞–Ω–∞—Ç–æ–º–µ—Ç—ñ–≤, –ü–¢–†–ö, –ü–ó–†–ö, —ó—Ö–Ω—ñ —Ç–µ—Ö–Ω—ñ—á–Ω—ñ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –ø–µ—Ä–µ–≤–∞–≥–∏ —Ç–∞ –Ω–µ–¥–æ–ª—ñ–∫–∏, –ø–æ—Ä–∞–¥–∏ —â–æ–¥–æ –≤–∏–±–æ—Ä—É —Ç–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è. –¢–∞–∫–æ–∂ —Å—é–¥–∏ –≤—ñ–¥–Ω–æ—Å—è—Ç—å—Å—è –æ–≥–ª—è–¥–∏ —ñ–Ω—à–æ–≥–æ —Å–ø–æ—Ä—è–¥–∂–µ–Ω–Ω—è, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, —Å—É—Ö–ø–∞–π–∫—ñ–≤.",
        "–ù–æ–≤–∏–Ω–∏, –°—Ç—Ä—ñ–º–∏, –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞": "–©–æ–¥–µ–Ω–Ω—ñ –∞–±–æ —â–æ—Ç–∏–∂–Ω–µ–≤—ñ –∑–≤–µ–¥–µ–Ω–Ω—è –Ω–æ–≤–∏–Ω –∑ —Ñ—Ä–æ–Ω—Ç—É —Ç–∞ –Ω–∞–≤–∫–æ–ª–æ–≤–æ—î–Ω–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó, –ø—Ä—è–º—ñ —Ç—Ä–∞–Ω—Å–ª—è—Ü—ñ—ó (—Å—Ç—Ä—ñ–º–∏) –∑ –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è–º –∞–∫—Ç—É–∞–ª—å–Ω–∏—Ö –ø–æ–¥—ñ–π, –∞–Ω–∞–ª—ñ—Ç–∏—á–Ω—ñ –æ–≥–ª—è–¥–∏ –≤–æ—î–Ω–Ω–æ-–ø–æ–ª—ñ—Ç–∏—á–Ω–æ—ó —Å–∏—Ç—É–∞—Ü—ñ—ó, –ø—ñ–¥—Å—É–º–∫–∏ —Ç–∏–∂–Ω—è, –æ–±–≥–æ–≤–æ—Ä–µ–Ω–Ω—è –º—ñ–∂–Ω–∞—Ä–æ–¥–Ω–æ—ó –¥–æ–ø–æ–º–æ–≥–∏, –∑–∞—è–≤ –æ—Ñ—ñ—Ü—ñ–π–Ω–∏—Ö –æ—Å—ñ–±.",
        "–†—ñ–∑–Ω–µ": "–í—ñ–¥–µ–æ, —è–∫—ñ –Ω–µ –ø—ñ–¥–ø–∞–¥–∞—é—Ç—å —á—ñ—Ç–∫–æ –ø—ñ–¥ –∂–æ–¥–Ω—É –∑ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –≤–∏—â–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π." # –ë–∞–∑–æ–≤–∏–π –æ–ø–∏—Å –¥–ª—è "–†—ñ–∑–Ω–µ"
    }

    # –§–æ—Ä–º—É—î–º–æ —á–∞—Å—Ç–∏–Ω—É –ø—Ä–æ–º–ø—Ç—É –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏, –±–∞–∑—É—é—á–∏—Å—å –Ω–∞ categories_list
    instructions_for_prompt = "–û–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π, –∑ —è–∫–∏—Ö –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–±—Ä–∞—Ç–∏ –û–î–ù–£:\n"
    for cat_name in categories_list:
        if cat_name in category_instructions:
            instructions_for_prompt += f"- **{cat_name}**: {category_instructions[cat_name]}\n"
        elif cat_name == default_other_category: # –Ø–∫—â–æ —Ü–µ "–†—ñ–∑–Ω–µ" —ñ –π–æ–≥–æ –Ω–µ–º–∞—î –≤ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è—Ö
             instructions_for_prompt += f"- **{default_other_category}**: {category_instructions.get(default_other_category, '–í—ñ–¥–µ–æ, —è–∫—ñ –Ω–µ –ø—ñ–¥–ø–∞–¥–∞—é—Ç—å –ø—ñ–¥ –∂–æ–¥–Ω—É –∑ –ø–µ—Ä–µ—Ä–∞—Ö–æ–≤–∞–Ω–∏—Ö –≤–∏—â–µ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π.')}\n"


    # –ü—Ä–∏–∫–ª–∞–¥–∏ –¥–ª—è Few-shot learning (–∞–¥–∞–ø—Ç—É–π –∑–∞ –ø–æ—Ç—Ä–µ–±–∏)
    examples_for_prompt = """
–û—Å—å –∫—ñ–ª—å–∫–∞ –ø—Ä–∏–∫–ª–∞–¥—ñ–≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó:
1. –ù–∞–∑–≤–∞: "–ù–µ–π–º–æ–≤—ñ—Ä–Ω–∏–π –±—ñ–π Leopard 2 –ø—Ä–æ—Ç–∏ –¢-90" -> –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –¢–∞–Ω–∫–∏
2. –ù–∞–∑–≤–∞: "–Ø–∫ –ø—Ä–∞—Ü—é—î HIMARS: –¥–µ—Ç–∞–ª—å–Ω–∏–π —Ä–æ–∑–±—ñ—Ä" -> –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ê—Ä—Ç–∏–ª–µ—Ä—ñ—è
3. –ù–∞–∑–≤–∞: "–Ü—Å—Ç–æ—Ä—ñ—è –ø—ñ–ª–æ—Ç–∞ –°—É-25, —è–∫–∏–π –≤–∏–∫–æ–Ω–∞–≤ 100 –±–æ–π–æ–≤–∏—Ö –≤–∏–ª—å–æ—Ç—ñ–≤" -> –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ì–µ—Ä–æ—ó–∑–º —Ç–∞ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –≤—ñ–π—Å—å–∫–æ–≤–∏—Ö, –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ñ —Ä–µ–ø–æ—Ä—Ç–∞–∂—ñ
4. –ù–∞–∑–≤–∞: "FPV-–¥—Ä–æ–Ω –∑–Ω–∏—â—É—î –≤–æ—Ä–æ–∂–∏–π —Å–∫–ª–∞–¥ –±–æ—î–ø—Ä–∏–ø–∞—Å—ñ–≤" -> –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –î—Ä–æ–Ω–∏
5. –ù–∞–∑–≤–∞: "–°—Ç—Ä—ñ–º –∑ –ë–∞—Ö–º—É—Ç–∞: –æ—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ –∑ –ø–µ—Ä–µ–¥–æ–≤–æ—ó" -> –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ù–æ–≤–∏–Ω–∏, –°—Ç—Ä—ñ–º–∏, –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞
6. –ù–∞–∑–≤–∞: "–û–≥–ª—è–¥ –∞–≤—Ç–æ–º–∞—Ç–∞ –ê–ö-74: –ø–µ—Ä–µ–≤–∞–≥–∏ —Ç–∞ –Ω–µ–¥–æ–ª—ñ–∫–∏" -> –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –û–≥–ª—è–¥–∏ –∑—Ä–∞–∑–∫—ñ–≤ –æ–∑–±—Ä–æ—î–Ω–Ω—è
7. –ù–∞–∑–≤–∞: "–ü–µ—Ä—à–∞ –¥–æ–ø–æ–º–æ–≥–∞ –ø—Ä–∏ –∫—É–ª—å–æ–≤–æ–º—É –ø–æ—Ä–∞–Ω–µ–Ω–Ω—ñ: —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è" -> –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ù–∞–≤—á–∞–Ω–Ω—è
8. –ù–∞–∑–≤–∞: "–ß–æ–º—É –Ω–µ –º–æ–∂–Ω–∞ –∑'—î–¥–Ω—É–≤–∞—Ç–∏ –º–∞–≥–∞–∑–∏–Ω–∏ —Å–∫–æ—Ç—á–µ–º?" -> –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: –ù–∞–≤—á–∞–Ω–Ω—è (–∞–±–æ –û–≥–ª—è–¥–∏ –∑—Ä–∞–∑–∫—ñ–≤ –æ–∑–±—Ä–æ—î–Ω–Ω—è, —è–∫—â–æ —Ñ–æ–∫—É—Å –Ω–∞ –∑–±—Ä–æ—ó)
"""

    prompt = f"""
–¢–µ–±–µ –ø—Ä–æ—Å—è—Ç—å –≤–∏—Å—Ç—É–ø–∏—Ç–∏ –≤ —Ä–æ–ª—ñ –µ–∫—Å–ø–µ—Ä—Ç–∞, —è–∫–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑—É—î –≤—ñ–¥–µ–æ –¥–ª—è YouTube-–∫–∞–Ω–∞–ª—É "–ê—Ä–º—ñ—è TV" –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —Ç–µ–º–∞—Ç–∏–∫–∏.
–¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äì –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ù–ê–ó–í–£ —Ç–∞ –û–ü–ò–° –≤—ñ–¥–µ–æ —ñ –≤—ñ–¥–Ω–µ—Å—Ç–∏ –π–æ–≥–æ –¥–æ –û–î–ù–Ü–Ñ–á –Ω–∞–π–±—ñ–ª—å—à –ø—ñ–¥—Ö–æ–¥—è—â–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑ –Ω–∞–¥–∞–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É.
–£–≤–∞–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–π –æ–ø–∏—Å–∏ –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø—Ä–∏–∫–ª–∞–¥–∏, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä.

{instructions_for_prompt}

{examples_for_prompt}

–¢–µ–ø–µ—Ä –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –Ω–∞—Å—Ç—É–ø–Ω–µ –≤—ñ–¥–µ–æ:
–ù–∞–∑–≤–∞ –≤—ñ–¥–µ–æ: "{title}"
–û–ø–∏—Å –≤—ñ–¥–µ–æ (—Ñ—Ä–∞–≥–º–µ–Ω—Ç): "{description_snippet}"

–î–æ—Å—Ç—É–ø–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó (—Ç–∏ –º–∞—î—à –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –û–î–ù–£ –∑ —Ü–∏—Ö –Ω–∞–∑–≤, —Ç–æ—á–Ω–æ —è–∫ –Ω–∞–ø–∏—Å–∞–Ω–æ):
{', '.join(categories_list)}

–ö–∞—Ç–µ–≥–æ—Ä—ñ—è:
"""
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini", 
            messages=[
                {"role": "system", "content": "–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç-–∫–ª–∞—Å–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤—ñ–¥–µ–æ–∫–æ–Ω—Ç–µ–Ω—Ç—É –≤—ñ–π—Å—å–∫–æ–≤–æ—ó —Ç–µ–º–∞—Ç–∏–∫–∏. –¢–≤–æ—è –≤—ñ–¥–ø–æ–≤—ñ–¥—å ‚Äì —Ü–µ –¢–Ü–õ–¨–ö–ò —Ç–æ—á–Ω–∞ –Ω–∞–∑–≤–∞ –æ–¥–Ω—ñ—î—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑—ñ —Å–ø–∏—Å–∫—É –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=50, 
            temperature=0.0 
        )
        category_response = response.choices[0].message.content.strip()
        
        # –û—á–∏—â–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –º–æ–∂–ª–∏–≤–∏—Ö –∑–∞–π–≤–∏—Ö —Å–ª—ñ–≤ —Ç–∏–ø—É "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: X"
        if ":" in category_response:
            category_response = category_response.split(":")[-1].strip()
        
        # –î–æ–¥–∞—Ç–∫–æ–≤–µ –æ—á–∏—â–µ–Ω–Ω—è, —è–∫—â–æ GPT –ø–æ–≤–µ—Ä—Ç–∞—î —â–æ—Å—å —Ç–∏–ø—É "–ö–∞—Ç–µ–≥–æ—Ä—ñ—è X" –∞–±–æ "'–ö–∞—Ç–µ–≥–æ—Ä—ñ—è X'"
        for cat_name_iter in categories_list:
            if cat_name_iter.lower() in category_response.lower(): # –®—É–∫–∞—î–º–æ –Ω–∞–∑–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
                category_response = cat_name_iter # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É –∑ –Ω–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É
                break


        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è —î –æ–¥–Ω—ñ—î—é –∑ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö
        matched_category = None
        for cat_option in categories_list:
            if cat_option.lower() == category_response.lower(): # –¢–æ—á–Ω–µ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –±–µ–∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è —Ä–µ–≥—ñ—Å—Ç—Ä—É
                matched_category = cat_option # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —Ä–µ–≥—ñ—Å—Ç—Ä–æ–º –∑ –Ω–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É
                break
        
        if matched_category:
            return matched_category
        else:
            # –Ø–∫—â–æ —Ç–æ—á–Ω–æ–≥–æ —Å–ø—ñ–≤–ø–∞–¥—ñ–Ω–Ω—è –Ω–µ–º–∞—î, —Å–ø—Ä–æ–±—É—î–º–æ –∑–Ω–∞–π—Ç–∏ —á–∞—Å—Ç–∫–æ–≤–µ —è–∫ –æ—Å—Ç–∞–Ω–Ω—ñ–π –≤–∞—Ä—ñ–∞–Ω—Ç
            # –¶–µ –º–µ–Ω—à –±–∞–∂–∞–Ω–æ, –±–æ –º–æ–∂–µ –ø—Ä–∏–∑–≤–µ—Å—Ç–∏ –¥–æ –ø–æ–º–∏–ª–æ–∫, —è–∫—â–æ –Ω–∞–∑–≤–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π —Å—Ö–æ–∂—ñ
            # for cat_option in categories_list:
            #     if cat_option.lower() in category_response.lower():
            #         # st.warning(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category_response}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ —Ç–æ—á–Ω–æ, –≤–∏–±—Ä–∞–Ω–æ —Å—Ö–æ–∂—É: '{cat_option}' –¥–ª—è –≤—ñ–¥–µ–æ '{title}'")
            #         return cat_option
            # st.warning(f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è '{category_response}' –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞ –¥–ª—è –≤—ñ–¥–µ–æ '{title}', –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ '{default_other_category}'")
            return default_other_category # –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ –ø—ñ–¥—ñ–π—à–ª–æ, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ "–†—ñ–∑–Ω–µ"
            
    except Exception as e:
        st.warning(f"–ü–æ–º–∏–ª–∫–∞ OpenAI –ø—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ '{title}': {e}")
        return default_other_category


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–æ–≥–ª–∏–±–ª–µ–Ω–æ—ó –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥ GPT
# @st.cache_data(ttl=3600) # –ú–æ–∂–Ω–∞ –∫–µ—à—É–≤–∞—Ç–∏, –∞–ª–µ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ –º–æ–∂–µ –∑–∞–ª–µ–∂–∞—Ç–∏ –≤—ñ–¥ —Å–≤—ñ–∂–∏—Ö –¥–∞–Ω–∏—Ö
def get_category_insights_gpt(category_name, videos_p1_df_cat, videos_p2_df_cat, avg_total_views_p1, avg_total_views_p2,
                              period1_dates, period2_dates):
    """–ì–µ–Ω–µ—Ä—É—î –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é GPT."""
    if not OPENAI_API_KEY:
        return "–ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ."

    def format_video_list_for_gpt(df, period_name, max_videos=5):
        if df is None or df.empty:
            return f"–î–∞–Ω—ñ –∑–∞ {period_name} –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ —ó—Ö –Ω–µ–±–∞–≥–∞—Ç–æ.\n"

        # –°–æ—Ä—Ç—É—î–º–æ –∑–∞ –ø–µ—Ä–µ–≥–ª—è–¥–∞–º–∏, –ø–æ–∫–∞–∑—É—î–º–æ –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à—ñ
        df_sorted = df.sort_values(by='views', ascending=False).head(max_videos)

        list_str = f"–ü—Ä–∏–∫–ª–∞–¥–∏ –≤—ñ–¥–µ–æ —Ç–∞ —ó—Ö –ø–µ—Ä–µ–≥–ª—è–¥–∏ ({period_name}, –¥–æ {max_videos} –Ω–∞–π–ø–æ–ø—É–ª—è—Ä–Ω—ñ—à–∏—Ö):\n"
        if df_sorted.empty:
            return list_str + "- –í—ñ–¥–µ–æ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ç–∞ –ø–µ—Ä—ñ–æ–¥—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.\n"
        for _, row in df_sorted.iterrows():
            list_str += f"- \"{row['title']}\" (–ü–µ—Ä–µ–≥–ª—è–¥–∏: {row['views']:,})\n"
        return list_str

    cat_avg_views_p1 = videos_p1_df_cat['views'].mean() if not videos_p1_df_cat.empty else 0
    cat_avg_views_p2 = videos_p2_df_cat['views'].mean() if not videos_p2_df_cat.empty else 0

    prompt = f"""
    –¢–∏ ‚Äì –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π –∞–Ω–∞–ª—ñ—Ç–∏–∫ YouTube-–∫–æ–Ω—Ç–µ–Ω—Ç—É –∫–∞–Ω–∞–ª—É "–ê—Ä–º—ñ—è TV". –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—é "{category_name}".

    –ü–µ—Ä—ñ–æ–¥ 1: {period1_dates[0].strftime('%Y-%m-%d')} - {period1_dates[1].strftime('%Y-%m-%d')}
    –ü–µ—Ä—ñ–æ–¥ 2: {period2_dates[0].strftime('%Y-%m-%d')} - {period2_dates[1].strftime('%Y-%m-%d')}

    –ó–∞–≥–∞–ª—å–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ:
    - –ü–µ—Ä—ñ–æ–¥ 1: {avg_total_views_p1:,.0f}
    - –ü–µ—Ä—ñ–æ–¥ 2: {avg_total_views_p2:,.0f}

    –î–∞–Ω—ñ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "{category_name}":
    - –°–µ—Ä. –ø–µ—Ä–µ–≥–ª—è–¥–∏ (–ü–µ—Ä—ñ–æ–¥ 1): {cat_avg_views_p1:,.0f} (–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ: {len(videos_p1_df_cat)})
    - –°–µ—Ä. –ø–µ—Ä–µ–≥–ª—è–¥–∏ (–ü–µ—Ä—ñ–æ–¥ 2): {cat_avg_views_p2:,.0f} (–ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ: {len(videos_p2_df_cat)})
    {format_video_list_for_gpt(videos_p1_df_cat, "–ü–µ—Ä—ñ–æ–¥ 1")}
    {format_video_list_for_gpt(videos_p2_df_cat, "–ü–µ—Ä—ñ–æ–¥ 2")}

    –ù–∞–¥–∞–π —Å—Ç–∏—Å–ª—É, –∞–ª–µ –∑–º—ñ—Å—Ç–æ–≤–Ω—É –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó "{category_name}" (–º–∞–∫—Å–∏–º—É–º 150 —Å–ª—ñ–≤):
    1.  **–°—Ç–∞–±—ñ–ª—å–Ω—ñ—Å—Ç—å —Ç–∞ —ñ–Ω—Ç–µ—Ä–µ—Å:** –ß–∏ —Å—Ç–∞–±—ñ–ª—å–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó? –ß–∏ –≤–∏–∫–ª–∏–∫–∞—î —Ç–µ–º–∞ —ñ–Ω—Ç–µ—Ä–µ—Å? –Ø–∫ –∑–º—ñ–Ω–∏–≤—Å—è —ñ–Ω—Ç–µ—Ä–µ—Å –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–º –ø–µ—Ä—ñ–æ–¥–æ–º?
    2.  **–ü—ñ–¥–≥—Ä—É–ø–∏/–∑–∞–∫–æ–Ω–æ–º—ñ—Ä–Ω–æ—Å—Ç—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ):** –Ø–∫—â–æ –ø–æ–º—ñ—Ç–Ω–æ, —á–∏ —î –ø—ñ–¥—Ç–µ–º–∏, —â–æ –ø—Ä–∞—Ü—é—é—Ç—å –∫—Ä–∞—â–µ/–≥—ñ—Ä—à–µ (–Ω–∞–ø—Ä., –≤ "–¢–∞–Ω–∫–∞—Ö" - Leopard vs –¢-72)?
    3.  **–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –∑ —Å–µ—Ä–µ–¥–Ω—ñ–º –ø–æ –∫–∞–Ω–∞–ª—É:** –ù–∞—Å–∫—ñ–ª—å–∫–∏ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ —Ü—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ —ñ–∑ –∑–∞–≥–∞–ª—å–Ω–∏–º–∏ –ø–æ–∫–∞–∑–Ω–∏–∫–∞–º–∏ –∫–∞–Ω–∞–ª—É?

    –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
    """
    try:
        response = openai.chat.completions.create(
            model="gpt-4o-mini",  # –ê–±–æ "gpt-3.5-turbo" –¥–ª—è –µ–∫–æ–Ω–æ–º—ñ—ó, –∞–ª–µ —è–∫—ñ—Å—Ç—å –º–æ–∂–µ –±—É—Ç–∏ –Ω–∏–∂—á–∞
            messages=[
                {"role": "system",
                 "content": "–¢–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫ YouTube, —â–æ –Ω–∞–¥–∞—î —Å—Ç–∏—Å–ª—ñ —Ç–∞ –∑–º—ñ—Å—Ç–æ–≤–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=350,  # –ù–∞–ª–∞—à—Ç—É–π –∑–∞ –ø–æ—Ç—Ä–µ–±–æ—é
            temperature=0.4
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        st.warning(f"–ü–æ–º–∏–ª–∫–∞ OpenAI –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category_name}': {e}")
        return f"–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{category_name}' —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É API."


# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ
def create_youtube_link(video_id, title):
    """–°—Ç–≤–æ—Ä—é—î Markdown –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤—ñ–¥–µ–æ YouTube."""
    video_id_str = str(video_id)
    return f"[{title}](https://www.youtube.com/watch?v={video_id_str})"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø—ñ–¥—Å—É–º–∫—ñ–≤
# @st.cache_data(ttl=3600)
def get_overall_summary_gpt(all_categories_stats_merged, avg_total_p1, avg_total_p2, period1_str, period2_str):
    """–ì–µ–Ω–µ—Ä—É—î –∑–∞–≥–∞–ª—å–Ω—ñ –≤–∏—Å–Ω–æ–≤–∫–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–∞ –æ—Å–Ω–æ–≤—ñ –≤—Å—ñ—Ö –¥–∞–Ω–∏—Ö."""
    if not OPENAI_API_KEY:
        return "–ü—ñ–¥—Å—É–º–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ: OpenAI API –∫–ª—é—á –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ."

    categories_data_str = "–ó–≤–µ–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö:\n"
    if all_categories_stats_merged.empty:
        categories_data_str += "–î–∞–Ω—ñ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É.\n"
    else:
        for _, row in all_categories_stats_merged.iterrows():
            categories_data_str += f"- –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {row['category']}\n"
            categories_data_str += f"  –ü–µ—Ä—ñ–æ–¥ 1: –í—ñ–¥–µ–æ: {int(row['count_p1'])}, –°–µ—Ä.–ø–µ—Ä–µ–≥–ª—è–¥–∏: {int(row['avg_views_p1']):,}\n"
            categories_data_str += f"  –ü–µ—Ä—ñ–æ–¥ 2: –í—ñ–¥–µ–æ: {int(row['count_p2'])}, –°–µ—Ä.–ø–µ—Ä–µ–≥–ª—è–¥–∏: {int(row['avg_views_p2']):,}\n"

            # –î–∏–Ω–∞–º—ñ–∫–∞
            avg1, avg2 = row['avg_views_p1'], row['avg_views_p2']
            if avg1 > 0 and avg2 > 0:
                change = ((avg2 - avg1) / avg1) * 100
                categories_data_str += f"  –î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ—Ä. –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤: {change:+.1f}%\n\n"
            elif avg2 > 0:
                categories_data_str += f"  –î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ—Ä. –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤: –ó'—è–≤–∏–ª–∏—Å—è –Ω–æ–≤—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏.\n\n"
            else:
                categories_data_str += f"  –î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ—Ä. –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤: –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.\n\n"

    prompt = f"""
    –¢–∏ ‚Äì –≥–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥ YouTube-–∫–∞–Ω–∞–ª—É "–ê—Ä–º—ñ—è TV". –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π –¥–∞–Ω—ñ –∑–∞ –¥–≤–∞ –ø–µ—Ä—ñ–æ–¥–∏.
    –ü–µ—Ä—ñ–æ–¥ 1: {period1_str}
    –ü–µ—Ä—ñ–æ–¥ 2: {period2_str}

    –ó–∞–≥–∞–ª—å–Ω—ñ —Å–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏ –Ω–∞ –∫–∞–Ω–∞–ª—ñ:
    - –ü–µ—Ä—ñ–æ–¥ 1: {avg_total_p1:,.0f}
    - –ü–µ—Ä—ñ–æ–¥ 2: {avg_total_p2:,.0f}

    {categories_data_str}

    –¢–≤–æ—î –∑–∞–≤–¥–∞–Ω–Ω—è ‚Äì –∑—Ä–æ–±–∏—Ç–∏ —Ä–æ–∑–≥–æ—Ä–Ω—É—Ç–∏–π, –∞–ª–µ —á—ñ—Ç–∫–∏–π –≤–∏—Å–Ω–æ–≤–æ–∫ (–±–ª–∏–∑—å–∫–æ 250-350 —Å–ª—ñ–≤), —è–∫–∏–π –≤–∫–ª—é—á–∞—Ç–∏–º–µ:
    1.  **–ö–ª—é—á–æ–≤—ñ —Ç–µ–Ω–¥–µ–Ω—Ü—ñ—ó:** –Ø–∫—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏ –≤—ñ–¥–±—É–ª–∏—Å—è –≤ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ç–µ–Ω—Ç—É –º—ñ–∂ –ø–µ—Ä—ñ–æ–¥–∞–º–∏?
    2.  **–£—Å–ø—ñ—à–Ω—ñ —Å—é–∂–µ—Ç–∏/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:** –í–∏–∑–Ω–∞—á —Ä–∏—Å–∏, –ø—Ä–∏—Ç–∞–º–∞–Ω–Ω—ñ —É—Å–ø—ñ—à–Ω–∏–º —Å—é–∂–µ—Ç–∞–º. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "–±—Ä–æ–Ω–µ—Ç–µ—Ö–Ω—ñ–∫–∞ –∑–∞—Ö—ñ–¥–Ω–æ–≥–æ –∑—Ä–∞–∑–∫–∞ —ñ —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –±—Ä–æ–Ω–µ—Ç–µ—Ö–Ω—ñ–∫–∞; —Ç—Ä–æ—Ñ–µ–π–Ω–∞ –∑–±—Ä–æ—è —ñ —Ç–µ—Ö–Ω—ñ–∫–∞; —Ä–æ–∑–ø–∞–∫–æ–≤–∫–∞ —Ç–µ—Ö–Ω—ñ–∫–∏, —ó—ó –Ω–∞—á–∏–Ω–∫–∞; –∞–≤—ñ–∞—Ü—ñ—è; –±–æ—ó —ñ –¥–∏–Ω–∞–º—ñ–∫–∞; –µ–∫—Å–∫–ª—é–∑–∏–≤–Ω—ñ—Å—Ç—å". –ú–æ–∂–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—ñ –ø—Ä–∏–∫–ª–∞–¥–∏, —è–∫—â–æ –≤–æ–Ω–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—é—Ç—å—Å—è –¥–∞–Ω–∏–º–∏, –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π —Å–≤–æ—ó.
    3.  **–ù–µ—É—Å–ø—ñ—à–Ω—ñ —Å—é–∂–µ—Ç–∏/—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:** –í–∏–∑–Ω–∞—á —Ä–∏—Å–∏, –ø—Ä–∏—Ç–∞–º–∞–Ω–Ω—ñ –Ω–µ—É—Å–ø—ñ—à–Ω–∏–º —Å—é–∂–µ—Ç–∞–º. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: "—Ä–∞–¥—è–Ω—Å—å–∫–∞ —Ç–µ—Ö–Ω—ñ–∫–∞, –æ—Å–æ–±–ª–∏–≤–æ –†–°–ó–í; –¥—Ä–æ–Ω–∏ (—è–∫—â–æ —Ü–µ —Ç–∞–∫); –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó –ø—Ä–æ –≤–∏–¥–∞—Ç–Ω–∏—Ö –±—ñ–π—Ü—ñ–≤ (—è–∫—â–æ —Ü–µ —Ç–∞–∫); —Å–Ω–∞–π–ø–µ—Ä–∏". –ú–æ–∂–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ —Ü—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –∞–±–æ –∑–∞–ø—Ä–æ–ø–æ–Ω—É–π —Å–≤–æ—ó.
    4.  **–°—Ç—Ä–∞—Ç–µ–≥—ñ—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:** –Ø–∫—ñ 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ –ø–æ—Ä–∞–¥–∏ —Ç–∏ –º–æ–∂–µ—à –¥–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—ñ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∫–æ–Ω—Ç–µ–Ω—Ç-–ø–ª–∞–Ω—É —Ç–∞ –ø—ñ–¥–≤–∏—â–µ–Ω–Ω—è –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –≤—ñ–¥–µ–æ?

    –ë—É–¥—å –æ–±'—î–∫—Ç–∏–≤–Ω–∏–º, —Å–ø–∏—Ä–∞–π—Å—è –Ω–∞ –Ω–∞–¥–∞–Ω—ñ —Ü–∏—Ñ—Ä–∏, –∞–ª–µ —Ç–∞–∫–æ–∂ —Ä–æ–±–∏ –æ–±“ë—Ä—É–Ω—Ç–æ–≤–∞–Ω—ñ –ø—Ä–∏–ø—É—â–µ–Ω–Ω—è —â–æ–¥–æ –ø—Ä–∏—á–∏–Ω–Ω–æ-–Ω–∞—Å–ª—ñ–¥–∫–æ–≤–∏—Ö –∑–≤'—è–∑–∫—ñ–≤. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é.
    """
    try:
        response = openai.chat.completions.create(
            model="gpt-4o",  # –¶—è –º–æ–¥–µ–ª—å –Ω–∞–π–∫—Ä–∞—â–µ –ø—ñ–¥—Ö–æ–¥–∏—Ç—å –¥–ª—è —Ç–∞–∫–∏—Ö –∑–∞–≤–¥–∞–Ω—å
            messages=[
                {"role": "system", "content": "–¢–∏ –≥–æ–ª–æ–≤–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥, —â–æ –≥–æ—Ç—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=800,  # –ë—ñ–ª—å—à–µ —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
            temperature=0.5
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        st.error(f"–ü–æ–º–∏–ª–∫–∞ OpenAI –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø—ñ–¥—Å—É–º–∫—ñ–≤: {e}")
        return "–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥—Å—É–º–∫–∏ —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É API."

if not YOUTUBE_API_KEY:
    st.error("–ü–æ–º–∏–ª–∫–∞: –ö–ª—é—á YouTube API –Ω–µ –Ω–∞–¥–∞–Ω–æ —É —Ñ–∞–π–ª—ñ config_keys.py.")
    st.stop()


# –§–£–ù–ö–¶–Ü–Ø –ö–ù–û–ü–ö–ò

def generate_report_markdown(
        period1_label, period2_label,
        total_videos_p1, avg_views_p1,
        total_videos_p2, avg_views_p2,
        delta_avg_views_overall, delta_percent_overall,  # –¶—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó –¥–∏–Ω–∞–º—ñ–∫–∏
        merged_category_stats_df,  # DataFrame –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        category_insights_dict,  # –°–ª–æ–≤–Ω–∏–∫, –¥–µ –∫–ª—é—á - –Ω–∞–∑–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó, –∑–Ω–∞—á–µ–Ω–Ω—è - –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞ GPT
        overall_summary_gpt  # –ó–∞–≥–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç GPT
):
    """–ì–µ–Ω–µ—Ä—É—î —Ç–µ–∫—Å—Ç–æ–≤–∏–π –∑–≤—ñ—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ Markdown."""

    report_content = f"# –ó–≤—ñ—Ç –∑ –∞–Ω–∞–ª—ñ–∑—É YouTube-–∫–∞–Ω–∞–ª—É '–ê—Ä–º—ñ—è TV'\n\n"
    report_content += f"–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {date.today().strftime('%d.%m.%Y')}\n\n"  # –î–æ–¥–∞—î–º–æ –¥–∞—Ç—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
    report_content += f"## –ê–Ω–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –ü–µ—Ä—ñ–æ–¥–∏\n"
    report_content += f"- **–ü–µ—Ä—ñ–æ–¥ 1:** {period1_label}\n"
    report_content += f"- **–ü–µ—Ä—ñ–æ–¥ 2:** {period2_label}\n\n"

    report_content += f"## –ó–∞–≥–∞–ª—å–Ω–∞ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤\n"
    report_content += f"### –ü–µ—Ä—ñ–æ–¥ 1 ({period1_label})\n"
    report_content += f"- –í—Å—å–æ–≥–æ –≤—ñ–¥–µ–æ (—â–æ –ø—Ä–æ–π—à–ª–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é): {total_videos_p1}\n"
    report_content += f"- –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –Ω–∞ –≤—ñ–¥–µ–æ: {avg_views_p1:,.0f}\n\n"

    report_content += f"### –ü–µ—Ä—ñ–æ–¥ 2 ({period2_label})\n"
    report_content += f"- –í—Å—å–æ–≥–æ –≤—ñ–¥–µ–æ (—â–æ –ø—Ä–æ–π—à–ª–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é): {total_videos_p2}\n"
    report_content += f"- –°–µ—Ä–µ–¥–Ω—è –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –Ω–∞ –≤—ñ–¥–µ–æ: {avg_views_p2:,.0f}\n\n"

    # –î–∏–Ω–∞–º—ñ–∫–∞ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤
    if total_videos_p1 > 0 and total_videos_p2 > 0 and avg_views_p1 > 0:
        report_content += f"**–î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ (–ü–µ—Ä—ñ–æ–¥ 2 vs –ü–µ—Ä—ñ–æ–¥ 1):** {delta_avg_views_overall:,.0f} ({delta_percent_overall:+.1f}%)\n\n"
    elif total_videos_p1 == 0 and total_videos_p2 > 0:
        report_content += f"**–î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ (–ü–µ—Ä—ñ–æ–¥ 2 vs –ü–µ—Ä—ñ–æ–¥ 1):** –î–∞–Ω—ñ –∑–∞ –ü–µ—Ä—ñ–æ–¥ 1 –≤—ñ–¥—Å—É—Ç–Ω—ñ, –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.\n\n"
    elif total_videos_p1 > 0 and total_videos_p2 == 0:
        report_content += f"**–î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ (–ü–µ—Ä—ñ–æ–¥ 2 vs –ü–µ—Ä—ñ–æ–¥ 1):** –î–∞–Ω—ñ –∑–∞ –ü–µ—Ä—ñ–æ–¥ 2 –≤—ñ–¥—Å—É—Ç–Ω—ñ, –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –Ω–µ–º–æ–∂–ª–∏–≤–µ.\n\n"
    else:
        report_content += f"**–î–∏–Ω–∞–º—ñ–∫–∞ —Å–µ—Ä–µ–¥–Ω—ñ—Ö –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ (–ü–µ—Ä—ñ–æ–¥ 2 vs –ü–µ—Ä—ñ–æ–¥ 1):** –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –¥–∏–Ω–∞–º—ñ–∫–∏.\n\n"

    report_content += f"## –î–µ—Ç–∞–ª—å–Ω–∏–π –ê–Ω–∞–ª—ñ–∑ –∑–∞ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏\n"
    if not merged_category_stats_df.empty:
        for index, row_cat in merged_category_stats_df.iterrows():
            report_content += f"### –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {row_cat['category']}\n"
            report_content += f"- **–ü–µ—Ä—ñ–æ–¥ 1:** –í—ñ–¥–µ–æ: {int(row_cat['count_p1'])}, √ò –ü–µ—Ä–µ–≥–ª—è–¥–∏: {int(row_cat['avg_views_p1']):,}\n"
            report_content += f"- **–ü–µ—Ä—ñ–æ–¥ 2:** –í—ñ–¥–µ–æ: {int(row_cat['count_p2'])}, √ò –ü–µ—Ä–µ–≥–ª—è–¥–∏: {int(row_cat['avg_views_p2']):,}\n"

            # –î–∏–Ω–∞–º—ñ–∫–∞ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
            avg1_cat = int(row_cat['avg_views_p1'])
            avg2_cat = int(row_cat['avg_views_p2'])
            count1_cat = int(row_cat['count_p1'])
            count2_cat = int(row_cat['count_p2'])

            if count1_cat > 0 and count2_cat > 0 and avg1_cat > 0:
                cat_delta_avg = avg2_cat - avg1_cat
                cat_delta_perc = (cat_delta_avg / avg1_cat) * 100 if avg1_cat != 0 else 0
                report_content += f"  - –î–∏–Ω–∞–º—ñ–∫–∞ √ò –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: {cat_delta_avg:,.0f} ({cat_delta_perc:+.1f}%)\n"
            elif count2_cat > 0 and count1_cat == 0:
                report_content += f"  - –î–∏–Ω–∞–º—ñ–∫–∞ √ò –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: –ù–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É –ü–µ—Ä—ñ–æ–¥—ñ 2.\n"
            elif count1_cat > 0 and count2_cat == 0:
                report_content += f"  - –î–∏–Ω–∞–º—ñ–∫–∞ √ò –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±—É–ª–∞ –ª–∏—à–µ —É –ü–µ—Ä—ñ–æ–¥—ñ 1.\n"
            else:
                report_content += f"  - –î–∏–Ω–∞–º—ñ–∫–∞ √ò –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó: –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö.\n"

            if row_cat['category'] in category_insights_dict and category_insights_dict[row_cat['category']]:
                report_content += f"\n  **–í–∏—Å–Ω–æ–≤–∫–∏ GPT –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"{row_cat['category']}\":**\n"
                # –ó–∞–º—ñ–Ω—é—î–º–æ –ø–µ—Ä–µ–Ω–æ—Å–∏ —Ä—è–¥–∫—ñ–≤ –Ω–∞ —Ç–∞–∫—ñ, —â–æ –ø—Ä–∞—Ü—é—é—Ç—å –≤ Markdown –¥–ª—è –±–∞–≥–∞—Ç–æ—Ä—è–¥–∫–æ–≤–∏—Ö –±–ª–æ–∫—ñ–≤
                insight_text = str(category_insights_dict[row_cat['category']]).replace('\n', '\n  ')
                report_content += f"  {insight_text}\n\n"
            else:
                report_content += f"  –í–∏—Å–Ω–æ–≤–∫–∏ GPT –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"{row_cat['category']}\" –≤—ñ–¥—Å—É—Ç–Ω—ñ.\n\n"
    else:
        report_content += "–î–∞–Ω—ñ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –≤—ñ–¥—Å—É—Ç–Ω—ñ.\n\n"

    report_content += f"## –ó–∞–≥–∞–ª—å–Ω—ñ –ü—ñ–¥—Å—É–º–∫–∏ —Ç–∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤—ñ–¥ GPT\n"
    if overall_summary_gpt and overall_summary_gpt.strip() and overall_summary_gpt != "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø—ñ–¥—Å—É–º–∫—ñ–≤.":
        report_content += f"{overall_summary_gpt}\n"
    else:
        report_content += "–ó–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –≤—ñ–¥ GPT –Ω–µ –±—É–ª–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ (–∞–±–æ –±—É–ª–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º–∏).\n"

    return report_content




# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –¥–æ–¥–∞—Ç–∫—É ---

if not YOUTUBE_API_KEY:
    st.error("–ü–æ–º–∏–ª–∫–∞: –ö–ª—é—á YouTube API –Ω–µ –Ω–∞–¥–∞–Ω–æ —É —Ñ–∞–π–ª—ñ config_keys.py.")
    st.stop()
if not OPENAI_API_KEY:
    st.error("–ü–æ–º–∏–ª–∫–∞: –ö–ª—é—á OpenAI API –Ω–µ –Ω–∞–¥–∞–Ω–æ —É —Ñ–∞–π–ª—ñ config_keys.py.")
    st.stop()

# –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª 1: –í–∏–±—ñ—Ä –¥–≤–æ—Ö –ø–µ—Ä—ñ–æ–¥—ñ–≤
st.sidebar.header("üóìÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É")
today = date.today()
# –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–µ—Ä—à–∏–π –¥–µ–Ω—å –º–∏–Ω—É–ª–æ–≥–æ –º—ñ—Å—è—Ü—è
# –°–ø–æ—á–∞—Ç–∫—É –æ—Ç—Ä–∏–º—É—î–º–æ –ø–µ—Ä—à–∏–π –¥–µ–Ω—å –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
first_day_current_month = today.replace(day=1)
# –ü–æ—Ç—ñ–º –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ –æ–¥–∏–Ω –¥–µ–Ω—å, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –º–∏–Ω—É–ª–æ–≥–æ –º—ñ—Å—è—Ü—è
last_day_previous_month = first_day_current_month - timedelta(days=1)
# –Ü –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –¥–µ–Ω—å –Ω–∞ 1, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä—à–∏–π –¥–µ–Ω—å –º–∏–Ω—É–ª–æ–≥–æ –º—ñ—Å—è—Ü—è
first_day_previous_month = last_day_previous_month.replace(day=1)

# –ü–µ—Ä—ñ–æ–¥ 1 (–∑–ª—ñ–≤–∞)
st.sidebar.subheader("–ü–µ—Ä—ñ–æ–¥ 1")
date_start_1 = st.sidebar.date_input(
    "–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É (–ü–µ—Ä—ñ–æ–¥ 1)",
    first_day_previous_month,  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –ø–æ—á–∞—Ç–æ–∫ –º–∏–Ω—É–ª–æ–≥–æ –º—ñ—Å—è—Ü—è
    max_value=today,
    key="p1_start"
)
date_end_1 = st.sidebar.date_input(
    "–î–∞—Ç–∞ –∫—ñ–Ω—Ü—è (–ü–µ—Ä—ñ–æ–¥ 1)",
    last_day_previous_month,  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –∫—ñ–Ω–µ—Ü—å –º–∏–Ω—É–ª–æ–≥–æ –º—ñ—Å—è—Ü—è
    max_value=today,
    key="p1_end"
)

# –ü–µ—Ä—ñ–æ–¥ 2 (—Å–ø—Ä–∞–≤–∞)
st.sidebar.subheader("–ü–µ—Ä—ñ–æ–¥ 2")
date_start_2 = st.sidebar.date_input(
    "–î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É (–ü–µ—Ä—ñ–æ–¥ 2)",
    first_day_current_month,  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - –ø–æ—á–∞—Ç–æ–∫ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –º—ñ—Å—è—Ü—è
    max_value=today,
    key="p2_start"
)
date_end_2 = st.sidebar.date_input(
    "–î–∞—Ç–∞ –∫—ñ–Ω—Ü—è (–ü–µ—Ä—ñ–æ–¥ 2)",
    today,  # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å—å–æ–≥–æ–¥–Ω—ñ
    max_value=today,
    key="p2_end"
)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞–Ω–∞–ª—ñ–∑—É
if st.sidebar.button("üöÄ –ü–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑", type="primary"):
    if date_start_1 > date_end_1:
        st.error("–ü–µ—Ä—ñ–æ–¥ 1: –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –¥–∞—Ç–∏ –∫—ñ–Ω—Ü—è.")
    elif date_start_2 > date_end_2:
        st.error("–ü–µ—Ä—ñ–æ–¥ 2: –î–∞—Ç–∞ –ø–æ—á–∞—Ç–∫—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ –¥–∞—Ç–∏ –∫—ñ–Ω—Ü—è.")
    else:
        st.info(f"üîÑ –ó–±–∏—Ä–∞—î–º–æ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –¥–∞–Ω—ñ... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å, –æ—Å–æ–±–ª–∏–≤–æ —è–∫—â–æ –ø–µ—Ä—ñ–æ–¥–∏ –≤–µ–ª–∏–∫—ñ.")

        # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –ø–µ—Ä—ñ–æ–¥—ñ–≤
        with st.spinner('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –ü–µ—Ä—ñ–æ–¥—É 1...'):
            videos_p1_df = get_channel_videos(YOUTUBE_API_KEY, CHANNEL_ID, date_start_1, date_end_1)
        with st.spinner('–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö –¥–ª—è –ü–µ—Ä—ñ–æ–¥—É 2...'):
            videos_p2_df = get_channel_videos(YOUTUBE_API_KEY, CHANNEL_ID, date_start_2, date_end_2)

        if videos_p1_df.empty and videos_p2_df.empty:
            st.warning("–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤—ñ–¥–µ–æ –∑–∞ –æ–±—Ä–∞–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—ñ –¥–∞—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ CHANNEL_ID.")
            st.stop()

        # –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª 2: –°–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏ —Ç–∞ –¥–∏–Ω–∞–º—ñ–∫–∞
        st.header("üìä –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤")
        col_stats1, col_stats2 = st.columns(2)

        avg_views_p1 = videos_p1_df['views'].mean() if not videos_p1_df.empty else 0
        total_videos_p1 = len(videos_p1_df)
        avg_views_p2 = videos_p2_df['views'].mean() if not videos_p2_df.empty else 0
        total_videos_p2 = len(videos_p2_df)

        period1_label = f"{date_start_1.strftime('%d.%m.%Y')} - {date_end_1.strftime('%d.%m.%Y')}"
        period2_label = f"{date_start_2.strftime('%d.%m.%Y')} - {date_end_2.strftime('%d.%m.%Y')}"

        with col_stats1:
            st.subheader(f"–ü–µ—Ä—ñ–æ–¥ 1: {period1_label}")
            st.metric(label="–í—Å—å–æ–≥–æ –≤—ñ–¥–µ–æ", value=f"{total_videos_p1}")
            st.metric(label="√ò –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –Ω–∞ –≤—ñ–¥–µ–æ", value=f"{avg_views_p1:,.0f}")

        with col_stats2:
            st.subheader(f"–ü–µ—Ä—ñ–æ–¥ 2: {period2_label}")
            st.metric(label="–í—Å—å–æ–≥–æ –≤—ñ–¥–µ–æ", value=f"{total_videos_p2}")
            st.metric(label="√ò –ü–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –Ω–∞ –≤—ñ–¥–µ–æ", value=f"{avg_views_p2:,.0f}")

            # –í—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è –¥–∏–Ω–∞–º—ñ–∫–∏
            delta_avg_views_overall = 0  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —É –∑–≤—ñ—Ç—ñ
            delta_percent_overall = 0.0

            if total_videos_p1 > 0 and total_videos_p2 > 0 and avg_views_p1 > 0:
                delta_avg_views_overall = avg_views_p2 - avg_views_p1
                delta_percent_overall = (delta_avg_views_overall / avg_views_p1) * 100 if avg_views_p1 else 0
                st.metric(label="–ó–º—ñ–Ω–∞ √ò –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤ –ø–æ—Ä—ñ–≤–Ω—è–Ω–æ –∑ –ü–µ—Ä—ñ–æ–¥–æ–º 1", value=f"{delta_avg_views_overall:,.0f}",
                          delta=f"{delta_percent_overall:.1f}%")
            elif total_videos_p2 > 0 and total_videos_p1 == 0:  # –î–∞–Ω—ñ —î —Ç—ñ–ª—å–∫–∏ –≤ –¥—Ä—É–≥–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ
                st.info("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ –Ω–µ–º–æ–∂–ª–∏–≤–µ (–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –ü–µ—Ä—ñ–æ–¥ 1, –∞–ª–µ —î –∑–∞ –ü–µ—Ä—ñ–æ–¥ 2).")
            elif total_videos_p1 > 0 and total_videos_p2 == 0:  # –î–∞–Ω—ñ —î —Ç—ñ–ª—å–∫–∏ –≤ –ø–µ—Ä—à–æ–º—É –ø–µ—Ä—ñ–æ–¥—ñ
                st.info("–ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏ –Ω–µ–º–æ–∂–ª–∏–≤–µ (–Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ –ü–µ—Ä—ñ–æ–¥ 2, –∞–ª–µ —î –∑–∞ –ü–µ—Ä—ñ–æ–¥ 1).")
            else:  # –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –≤ –æ–±–æ—Ö –∞–±–æ —Ç—ñ–ª—å–∫–∏ –≤ –æ–¥–Ω–æ–º—É, –∞–ª–µ avg_views_p1 = 0
                st.info("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–∏–Ω–∞–º—ñ–∫–∏.")

        # –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª 3: –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è –≤—ñ–¥–µ–æ
        st.header("üóÇÔ∏è –ê–Ω–∞–ª—ñ–∑ –∑–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏")

        videos_p1_categorized_df = videos_p1_df.copy()
        videos_p2_categorized_df = videos_p2_df.copy()

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–µ—Ä–µ–¥–Ω—ñ –∑–∞–≥–∞–ª—å–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏ –≤ session_state –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ get_category_insights_gpt
        st.session_state.avg_views_period1 = avg_views_p1
        st.session_state.avg_views_period2 = avg_views_p2

        if not videos_p1_categorized_df.empty:
            st.subheader(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è –≤—ñ–¥–µ–æ –∑–∞ –ü–µ—Ä—ñ–æ–¥ 1 ({period1_label})")
            progress_bar_1 = st.progress(0.0) # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑ 0.0 (float)
            status_text_1 = st.empty()
            num_videos_p1 = len(videos_p1_categorized_df) # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω —Ä–∞–∑
            
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ enumerate –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É 'idx'
            for idx, (df_index, row) in enumerate(videos_p1_categorized_df.iterrows()):
                category = categorize_video_gpt(row['title'], row['description'], CATEGORIES)
                videos_p1_categorized_df.loc[df_index, 'category'] = category # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å df_index –¥–ª—è .loc
                time.sleep(0.1)

                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É 'idx'
                progress_percentage = (idx + 1) / num_videos_p1
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç—å 1.0
                progress_bar_1.progress(min(progress_percentage, 1.0)) 
                status_text_1.text(f"–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ {idx + 1}/{num_videos_p1}...")
            status_text_1.success(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è –≤—ñ–¥–µ–æ –∑–∞ –ü–µ—Ä—ñ–æ–¥ 1 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            progress_bar_1.empty()
# ...
        if not videos_p2_categorized_df.empty:
            st.subheader(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è –≤—ñ–¥–µ–æ –∑–∞ –ü–µ—Ä—ñ–æ–¥ 2 ({period2_label})")
            progress_bar_2 = st.progress(0.0) # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ –∑ 0.0 (float)
            status_text_2 = st.empty()
            num_videos_p2 = len(videos_p2_categorized_df) # –û—Ç—Ä–∏–º—É—î–º–æ –∑–∞–≥–∞–ª—å–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–∏–Ω —Ä–∞–∑

            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ enumerate –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É 'idx'
            for idx, (df_index, row) in enumerate(videos_p2_categorized_df.iterrows()):
                category = categorize_video_gpt(row['title'], row['description'], CATEGORIES)
                videos_p2_categorized_df.loc[df_index, 'category'] = category # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π —ñ–Ω–¥–µ–∫—Å df_index –¥–ª—è .loc
                time.sleep(0.1)

                # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ–≥–æ —ñ–Ω–¥–µ–∫—Å—É 'idx'
                progress_percentage = (idx + 1) / num_videos_p2
                # –î–æ–¥–∞—Ç–∫–æ–≤–∞ –≥–∞—Ä–∞–Ω—Ç—ñ—è, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –ø–µ—Ä–µ–≤–∏—â–∏—Ç—å 1.0
                progress_bar_2.progress(min(progress_percentage, 1.0))
                status_text_2.text(f"–û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–µ–æ {idx + 1}/{num_videos_p2}...")
            status_text_2.success(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è –≤—ñ–¥–µ–æ –∑–∞ –ü–µ—Ä—ñ–æ–¥ 2 –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            progress_bar_2.empty()
# ...


        # 3.1: –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤—ñ–¥–µ–æ —Ç–∞ —Å–µ—Ä–µ–¥–Ω—ñ –ø–µ—Ä–µ–≥–ª—è–¥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö + –¥–∏–Ω–∞–º—ñ–∫–∞
        def get_category_stats_df(df):
            if df.empty or 'category' not in df.columns:
                return pd.DataFrame(columns=['category', 'video_count', 'average_views'])
            stats = df.groupby('category').agg(
                video_count=('id', 'count'),
                average_views=('views', 'mean')
            ).reset_index()
            stats['average_views'] = pd.to_numeric(stats['average_views'], errors='coerce').fillna(0)
            stats['average_views'] = stats['average_views'].round(0).astype(int)
            return stats


        category_stats_p1 = get_category_stats_df(videos_p1_categorized_df)
        category_stats_p2 = get_category_stats_df(videos_p2_categorized_df)

        merged_category_stats = pd.merge(
            category_stats_p1.rename(columns={'video_count': 'count_p1', 'average_views': 'avg_views_p1'}),
            category_stats_p2.rename(columns={'video_count': 'count_p2', 'average_views': 'avg_views_p2'}),
            on='category',
            how='outer'
        ).fillna(0)

        for col in ['count_p1', 'avg_views_p1', 'count_p2', 'avg_views_p2']:
            merged_category_stats[col] = pd.to_numeric(merged_category_stats[col], errors='coerce').fillna(0).astype(
                int)

        category_insights_for_report = {}  # –î–ª—è –º–∞–π–±—É—Ç–Ω—å–æ–≥–æ –µ–∫—Å–ø–æ—Ä—Ç—É

        if not merged_category_stats.empty:
            st.subheader("–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö")

            try:
                merged_category_stats['category_order'] = merged_category_stats['category'].apply(
                    lambda x: CATEGORIES.index(x) if x in CATEGORIES else len(CATEGORIES)
                )
                merged_category_stats = merged_category_stats.sort_values(by='category_order').drop(
                    columns=['category_order'])
            except ValueError as e:
                st.warning(
                    f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π: {e}. –ú–æ–∂–ª–∏–≤–æ, GPT –ø–æ–≤–µ—Ä–Ω—É–≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é, —è–∫–æ—ó –Ω–µ–º–∞—î —É —Å–ø–∏—Å–∫—É CATEGORIES.")
                merged_category_stats = merged_category_stats.sort_values(by='category')

            for index, row_cat in merged_category_stats.iterrows():
                st.markdown(f"--- \n#### –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {row_cat['category']}")
                cat_col1, cat_col2, cat_col3 = st.columns([2, 2, 3])

                with cat_col1:
                    st.metric(label=f"–í—ñ–¥–µ–æ (–ü–µ—Ä—ñ–æ–¥ 1)", value=f"{row_cat['count_p1']}")
                    st.metric(label=f"√ò –ü–µ—Ä–µ–≥–ª—è–¥–∏ (–ü–µ—Ä—ñ–æ–¥ 1)", value=f"{row_cat['avg_views_p1']:,}")

                with cat_col2:
                    st.metric(label=f"–í—ñ–¥–µ–æ (–ü–µ—Ä—ñ–æ–¥ 2)", value=f"{row_cat['count_p2']}")
                    st.metric(label=f"√ò –ü–µ—Ä–µ–≥–ª—è–¥–∏ (–ü–µ—Ä—ñ–æ–¥ 2)", value=f"{row_cat['avg_views_p2']:,}")

                    if row_cat['count_p1'] > 0 and row_cat['count_p2'] > 0 and row_cat['avg_views_p1'] > 0:
                        cat_delta_avg = row_cat['avg_views_p2'] - row_cat['avg_views_p1']
                        cat_delta_perc = (cat_delta_avg / row_cat['avg_views_p1']) * 100 if row_cat[
                                                                                                'avg_views_p1'] != 0 else 0
                        st.metric(label="–ó–º—ñ–Ω–∞ √ò –ø–µ—Ä–µ–≥–ª—è–¥—ñ–≤", value=f"{cat_delta_avg:,.0f}",
                                  delta=f"{cat_delta_perc:.1f}%")
                    elif row_cat['count_p2'] > 0 and row_cat['count_p1'] == 0:
                        st.markdown("<p style='font-size:small; color:gray;'>–ù–æ–≤–∞ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å —É –ü–µ—Ä—ñ–æ–¥—ñ 2</p>",
                                    unsafe_allow_html=True)
                    elif row_cat['count_p1'] > 0 and row_cat['count_p2'] == 0:
                        st.markdown("<p style='font-size:small; color:gray;'>–ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –±—É–ª–∞ –ª–∏—à–µ —É –ü–µ—Ä—ñ–æ–¥—ñ 1</p>",
                                    unsafe_allow_html=True)
                # --- –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ with cat_col2 ---
                # --- –û–°–¨ –¢–£–¢ –ú–ê–Ñ –ë–£–¢–ò –§–Ü–õ–¨–¢–†–ê–¶–Ü–Ø ---
                cat_videos_p1_df_filtered = pd.DataFrame() # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —è–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π DataFrame
if not videos_p1_categorized_df.empty and 'category' in videos_p1_categorized_df.columns:
    try:
        cat_videos_p1_df_filtered = videos_p1_categorized_df[
            videos_p1_categorized_df['category'] == row_cat['category']
        ]
    except Exception as e:
        st.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ –ü–µ—Ä—ñ–æ–¥—É 1 –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{row_cat['category']}': {e}")
        # –ó–∞–ª–∏—à–∞—î–º–æ cat_videos_p1_df_filtered –ø–æ—Ä–æ–∂–Ω—ñ–º, –æ—Å–∫—ñ–ª—å–∫–∏ –π–æ–≥–æ –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —è–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π
else:
    if videos_p1_categorized_df.empty:
        pass # DataFrame –ø–æ—Ä–æ–∂–Ω—ñ–π, cat_videos_p1_df_filtered –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø–æ—Ä–æ–∂–Ω—ñ–º
    elif 'category' not in videos_p1_categorized_df.columns:
        st.warning(f"–°—Ç–æ–≤–ø–µ—Ü—å 'category' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –¥–∞–Ω–∏—Ö –ü–µ—Ä—ñ–æ–¥—É 1 –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{row_cat['category']}'.")
        # cat_videos_p1_df_filtered –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø–æ—Ä–æ–∂–Ω—ñ–º

cat_videos_p2_df_filtered = pd.DataFrame() # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —è–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π DataFrame
if not videos_p2_categorized_df.empty and 'category' in videos_p2_categorized_df.columns:
    try:
        cat_videos_p2_df_filtered = videos_p2_categorized_df[
            videos_p2_categorized_df['category'] == row_cat['category']
        ]
    except Exception as e:
        st.warning(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—ó –≤—ñ–¥–µ–æ –ü–µ—Ä—ñ–æ–¥—É 2 –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{row_cat['category']}': {e}")
        # –ó–∞–ª–∏—à–∞—î–º–æ cat_videos_p2_df_filtered –ø–æ—Ä–æ–∂–Ω—ñ–º
else:
    if videos_p2_categorized_df.empty:
        pass # DataFrame –ø–æ—Ä–æ–∂–Ω—ñ–π, cat_videos_p2_df_filtered –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø–æ—Ä–æ–∂–Ω—ñ–º
    elif 'category' not in videos_p2_categorized_df.columns:
        st.warning(f"–°—Ç–æ–≤–ø–µ—Ü—å 'category' –≤—ñ–¥—Å—É—Ç–Ω—ñ–π —É –¥–∞–Ω–∏—Ö –ü–µ—Ä—ñ–æ–¥—É 2 –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{row_cat['category']}'.")
        # cat_videos_p2_df_filtered –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –ø–æ—Ä–æ–∂–Ω—ñ–º
        
                # --- –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ –§–Ü–õ–¨–¢–†–ê–¶–Ü–á ---
                # –¢–µ–ø–µ—Ä with cat_col3: (—Ç–∞–∫–∏–π —Å–∞–º–∏–π —Ä—ñ–≤–µ–Ω—å –≤—ñ–¥—Å—Ç—É–ø—É)

                with cat_col3:
                    with st.spinner(f"–ê–Ω–∞–ª—ñ–∑ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{row_cat['category']}' –≤—ñ–¥ GPT..."):
                        avg_total_p1_for_cat_insights = st.session_state.get('avg_views_period1', 0)
                        avg_total_p2_for_cat_insights = st.session_state.get('avg_views_period2', 0)

                        insights = get_category_insights_gpt(
                            row_cat['category'],
                            cat_videos_p1_df_filtered,
                            cat_videos_p2_df_filtered,
                            avg_total_p1_for_cat_insights,
                            avg_total_p2_for_cat_insights,
                            (date_start_1, date_end_1),
                            (date_start_2, date_end_2)
                        )
                        st.markdown(f"**–í–∏—Å–Ω–æ–≤–∫–∏ GPT –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó \"{row_cat['category']}\":**")
                        st.caption(insights)
                        category_insights_for_report[row_cat['category']] = insights
                        time.sleep(0.2)
                # --- –¢–ï–ü–ï–† –ï–ö–°–ü–ê–ù–î–ï–† (—Ç–∞–∫–∏–π —Å–∞–º–∏–π —Ä—ñ–≤–µ–Ω—å –≤—ñ–¥—Å—Ç—É–ø—É) ---
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ —î –≤—ñ–¥–µ–æ –≤ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó —Ö–æ—á–∞ –± –∑–∞ –æ–¥–∏–Ω –ø–µ—Ä—ñ–æ–¥
                has_videos_in_category_p1 = not cat_videos_p1_df_filtered.empty
                has_videos_in_category_p2 = not cat_videos_p2_df_filtered.empty

                total_videos_in_category_for_expander = 0
                if has_videos_in_category_p1:
                    total_videos_in_category_for_expander += len(cat_videos_p1_df_filtered)
                if has_videos_in_category_p2:
                    total_videos_in_category_for_expander += len(cat_videos_p2_df_filtered)

                expander_label = f"üìÑ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—ñ–¥–µ–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{row_cat['category']}' ({total_videos_in_category_for_expander} –≤—ñ–¥–µ–æ)"
                if total_videos_in_category_for_expander == 0:
                    expander_label = f"üìÑ –í—ñ–¥–µ–æ –≤ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó '{row_cat['category']}' –≤—ñ–¥—Å—É—Ç–Ω—ñ"

                with st.expander(expander_label):

                    # –í—ñ–¥–µ–æ –∑–∞ –ü–µ—Ä—ñ–æ–¥ 1
                    st.markdown(f"**–í—ñ–¥–µ–æ –∑–∞ –ü–µ—Ä—ñ–æ–¥ 1 ({period1_label}):**")
                    if has_videos_in_category_p1:
                        for _, video_row in cat_videos_p1_df_filtered.sort_values(by='views', ascending=False).iterrows():
                            video_id_val = video_row['id']
                            video_title = video_row['title']
                            video_views = video_row['views']
                            link = create_youtube_link(video_id_val, video_title)
                            st.markdown(f"- {link} (–ü–µ—Ä–µ–≥–ª—è–¥–∏: {video_views:,})")
                    else:
                        st.caption("–í—ñ–¥–µ–æ –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ —É –¥–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ.")

                    st.markdown("---")

                    # –í—ñ–¥–µ–æ –∑–∞ –ü–µ—Ä—ñ–æ–¥ 2
                    st.markdown(f"**–í—ñ–¥–µ–æ –∑–∞ –ü–µ—Ä—ñ–æ–¥ 2 ({period2_label}):**")
                    if has_videos_in_category_p2:
                        for _, video_row in cat_videos_p2_df_filtered.sort_values(by='views', ascending=False).iterrows():
                            video_id_val = video_row['id']
                            video_title = video_row['title']
                            video_views = video_row['views']
                            link = create_youtube_link(video_id_val, video_title)
                            st.markdown(f"- {link} (–ü–µ—Ä–µ–≥–ª—è–¥–∏: {video_views:,})")
                    else:
                        st.caption("–í—ñ–¥–µ–æ –∑–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ —É –¥–∞–Ω—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤—ñ–¥—Å—É—Ç–Ω—ñ.")
                # --- –ö–Ü–ù–ï–¶–¨ –ë–õ–û–ö–£ –ï–ö–°–ü–ê–ù–î–ï–†–ê ---
        else:
            st.info("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö –ø—ñ—Å–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—ó.")

        # –§—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª 4: –ü—ñ–¥—Å—É–º–∫–∏ –≤—ñ–¥ GPT
        st.header("üèÜ –ó–∞–≥–∞–ª—å–Ω—ñ –ø—ñ–¥—Å—É–º–∫–∏ —Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó")
        overall_summary_report_data = "–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø—ñ–¥—Å—É–º–∫—ñ–≤."
        if not merged_category_stats.empty:
            with st.spinner("GPT –≥–æ—Ç—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–∏–π –∑–≤—ñ—Ç... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ —Ö–≤–∏–ª–∏–Ω—É-–¥–≤—ñ."):
                overall_summary_report_data = get_overall_summary_gpt(
                    merged_category_stats,
                    avg_views_p1,
                    avg_views_p2,
                    period1_label,
                    period2_label
                )
                st.markdown(overall_summary_report_data)
        else:
            st.warning("–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–æ–≤–∞–Ω–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø—ñ–¥—Å—É–º–∫—ñ–≤.")

        st.success("–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        # app.py (–ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è)
        # ... (–∫–æ–¥ –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ if st.sidebar.button(...), –¥–æ st.success("–ê–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"))

        # --- –ö–ù–û–ü–ö–ê –ï–ö–°–ü–û–†–¢–£ –ó–í–Ü–¢–£ ---
        # –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –≤—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É —ñ—Å–Ω—É—é—Ç—å —ñ –º–∞—é—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è.
        # –ó–º—ñ–Ω–Ω—ñ: period1_label, period2_label, total_videos_p1, avg_views_p1,
        # total_videos_p2, avg_views_p2, delta_avg_views_overall, delta_percent_overall,
        # merged_category_stats, category_insights_for_report, overall_summary_report_data
        # –≤–∂–µ –º–∞—é—Ç—å –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω—ñ –Ω–∞ —Ü—å–æ–º—É –µ—Ç–∞–ø—ñ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–¥—É.

        # –§–æ—Ä–º—É—î–º–æ –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É –¥–ª—è –∑–≤—ñ—Ç—É (–º–æ–∂–Ω–∞ –≤–∑—è—Ç–∏ –∑ CHANNEL_ID –∞–±–æ –∑–∞–¥–∞—Ç–∏ –≤—Ä—É—á–Ω—É)
        # –î–ª—è –ø—Ä–∏–∫–ª–∞–¥—É, —è–∫—â–æ CHANNEL_ID —Ü–µ "UCk_9267pA5M4Y3Z_Yj_1_9Q", —Ç–æ —Ü–µ "–í—ñ–π—Å—å–∫–æ–≤–µ —Ç–µ–ª–µ–±–∞—á–µ–Ω–Ω—è –£–∫—Ä–∞—ó–Ω–∏"
        # –¢–∏ –º–æ–∂–µ—à –∑–∞–¥–∞—Ç–∏ –Ω–∞–∑–≤—É –∫–∞–Ω–∞–ª—É —è–∫ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –Ω–∞ –ø–æ—á–∞—Ç–∫—É —Ñ–∞–π–ª—É, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ.
        # –¢—É—Ç —è –ø—Ä–æ—Å—Ç–æ –∑–∞–ª–∏—à—É "ArmiyaTV" –¥–ª—è –ø—Ä–∏–∫–ª–∞–¥—É.
        channel_name_for_report = "ArmyTV_AInalitics"

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –æ—Å–Ω–æ–≤–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–≤—ñ—Ç—É –Ω–µ –ø–æ—Ä–æ–∂–Ω—ñ.
        # (category_insights_for_report –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—ñ–º, —è–∫—â–æ –Ω–µ–º–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ–π,
        #  overall_summary_report_data –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—ñ—Å—Ç—å –¥–∞–Ω–∏—Ö)
        if 'merged_category_stats' in locals() and not merged_category_stats.empty:
            st.sidebar.markdown("---")
            st.sidebar.header("üì• –ï–∫—Å–ø–æ—Ä—Ç –ó–≤—ñ—Ç—É")

            report_str_for_download = generate_report_markdown(
                period1_label, period2_label,
                total_videos_p1, avg_views_p1,
                total_videos_p2, avg_views_p2,
                delta_avg_views_overall,
                delta_percent_overall,
                merged_category_stats,
                category_insights_for_report,
                overall_summary_report_data
            )

            current_date_str = date.today().strftime("%Y-%m-%d")  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –¥–∞—Ç—É
            report_filename = f"youtube_analysis_{channel_name_for_report}_{current_date_str}.md"

            st.sidebar.download_button(
                label="üìÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –∑–≤—ñ—Ç (.md)",
                data=report_str_for_download.encode('utf-8'),  # –ö–æ–¥—É—î–º–æ –≤ UTF-8 –¥–ª—è –∫–æ—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–∏—Ä–∏–ª–∏—Ü—ñ
                file_name=report_filename,
                mime="text/markdown"
            )
        else:
            # –Ø–∫—â–æ merged_category_stats –ø–æ—Ä–æ–∂–Ω—ñ–π, –∫–Ω–æ–ø–∫–∞ –µ–∫—Å–ø–æ—Ä—Ç—É –Ω–µ –±—É–¥–µ –ø–æ–∫–∞–∑–∞–Ω–∞,
            # –∞–±–æ –º–æ–∂–Ω–∞ –≤–∏–≤–µ—Å—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ.
            st.sidebar.info("–î–∞–Ω—ñ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É –≤—ñ–¥—Å—É—Ç–Ω—ñ (–Ω–µ–º–∞—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö).")

else:
    st.info("‚òùÔ∏è –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –ø–µ—Ä—ñ–æ–¥–∏ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ—á–∞—Ç–∏ –∞–Ω–∞–ª—ñ–∑' –Ω–∞ –±—ñ—á–Ω—ñ–π –ø–∞–Ω–µ–ª—ñ.")

st.sidebar.markdown("---")
st.sidebar.markdown("–ê–Ω–∞–ª—ñ—Ç–∏—á–Ω–∏–π –∞–≥–µ–Ω—Ç –¥–ª—è YouTube.")
